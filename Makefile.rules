GO_LIBGO_PATH := $(dir $(lastword $(MAKEFILE_LIST)))

GO_BM  := $(addsuffix /scripts/build-makefile.py,$(GO_LIBGO_PATH))
GO_PY3 := python3

################################################################################
# Paths and Filenames
################################################################################

# Transform $libname to object file name
# Example: example.com/test -> $(BUILD_DIR)/example.com/test/test.o
# golibnametoolib $libname(s)
define golibnametoolib =
$(addprefix $(BUILD_DIR)/,$(join $(1),\
	$(addsuffix .o,$(addprefix /,$(notdir $(1))))))
endef

# Transform $libname to archive file name
# Example: example.com/test -> $(BUILD_DIR)/example.com/libtest.a
# golibnametoalib $libname(s)
define golibnametoalib =
$(addprefix $(BUILD_DIR)/,$(join $(dir $(1)),\
	$(addsuffix .a,$(addprefix lib,$(notdir $(1))))))
endef

# Receive Makefile path for a library
# Example: example.com/test -> $(BUILD_DIR)/example.com/test/Makefile
define golibnametomk =
$(addprefix $(BUILD_DIR)/,$(addsuffix /Makefile,$(1)))
endef

################################################################################
# Variable name prefixes
################################################################################

# Transform $libname to a variable name. This will uppercase and substitute
# . and / with underscores.
# Example: example.com/test -> EXAMPLE_COM_TEST
# vgolib $libname(s)
vgolib = $(call uc,$(subst .,_,$(subst /,_,$(1))))

# Build a variable name from $libname
# Example: example.com/test, SRCS -> EXAMPLE_COM_TEST_SRCS
# vprefix_golib $libname,$varname(s)
vprefix_golib = $(addprefix $(call vgolib,$(1))_,$(2))

################################################################################
# Registration
################################################################################

# Filter compiler flags commonly used in Unikraft that are not supported by
# gccgo and trigger a warning during build
# _filter_flags $flags
define _gofilter_flags =
$(subst -ffreestanding,, \
$(subst -fhosted,,$(1)))
endef

# Register a GO library to the build system. This might be GO main
# or a different GO package (in which case we have the addtional
# -fgo-pkgpath flag)
# _addgolib $libname,$extraflags
define _addgolib =
$(call mk_sub_build_dir,$(1))
UK_GOLIBS += $(1)
$(eval $(call vgolib,$(1))_BASE  := $(_IMPORT_BASE))
$(eval $(call vgolib,$(1))_BUILD := $(BUILD_DIR)/$(1))
$(eval $(call vgolib,$(1))_FLAGS := $(3))
endef

# addgolib $libname
addgolib = $(call _addgolib,$(1),-fgo-pkgpath=$(1))

# addgoapp $libname
define addgoapp =
$(if $(UK_GOAPP), \
$(error Cannot add GO app $(1). There is already a GO app set $(UK_GOAPP))
)
UK_GOAPP = $(1)
$(call _addgolib,$(1),)
endef

# addgolib_s $libname,$switch
define addgolib_s =
ifeq ($(2),y)
$(call addgolib,$(1))
endif
endef

# Register a GO library and append it to the list of libraries that need to
# be processed for dependency resolution before starting the actual build
# addgolib_r $libname
define addgolib_r =
$(call addgolib,$(1))
UK_GOLIBS_R += $(1)
endef

################################################################################
# Buildrules for libraries
################################################################################

# build_golib $libname,$source,$target,$deps,$extraflags
define build_golib =
$(3): $(2) $(4)
	$(call build_cmd,GCCGO,$(1),$(3),\
		$(GOC) $$(call _gofilter_flags,$$(COMPFLAGS) $$(COMPFLAGS-y)) \
		       $$(GOFLAGS) $$(GOFLAGS-y) \
		       $(5) \
		       -I $(BUILD_DIR) \
		       $$(call _gofilter_flags,$$(DBGFLAGS) $$(DBGFLAGS-y)) \
		       -c $(filter %.go,$(2)) -o $(3) && \
		$(AR) rcD $(call golibnametoalib,$(1)) $(3)
	)

UK_SRCS-y += $(2)
UK_OBJS-y += $(3)
$(eval $(call vgolib,$(1),OBJS-y) += $(3))
$(eval $(call vgolib,$(1),CLEAN-y) += $(call build_clean,$(3)))
endef
