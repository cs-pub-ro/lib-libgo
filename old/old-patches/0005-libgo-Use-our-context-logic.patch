From 8e22dedf2df725d256235d9bd22fb97f290fd12d Mon Sep 17 00:00:00 2001
From: Costin Lupu <costin.lup@gmail.com>
Date: Wed, 21 Aug 2019 17:04:13 +0300
Subject: [PATCH 3/3] libgo: Use our context logic

Signed-off-by: Charalampos Mainas <charalampos.mainas@neclab.eu>
---
 libgo/runtime/proc.c | 12 +++++++++---
 1 file changed, 9 insertions(+), 3 deletions(-)

diff --git a/libgo/runtime/proc.c b/libgo/runtime/proc.c
index 06a9c2ad6..e8a43272e 100644
--- a/libgo/runtime/proc.c
+++ b/libgo/runtime/proc.c
@@ -43,6 +43,10 @@ extern void __splitstack_block_signals_context (void *context[10], int *,
 
 #endif
 
+extern size_t get_stack_size();
+extern void makecontext1(ucontext_t *, void *, int);
+extern void *alloc_stack();
+
 #ifndef PTHREAD_STACK_MIN
 # define PTHREAD_STACK_MIN 8192
 #endif
@@ -831,7 +835,7 @@ makeGContext(G* gp, byte* sp, uintptr spsize) {
 	getcontext(uc);
 	uc->uc_stack.ss_sp = sp;
 	uc->uc_stack.ss_size = (size_t)spsize;
-	makecontext(uc, kickoff, 0);
+	makecontext1(uc, kickoff, 0);
 }
 
 // Create a new m.  It will start off with a call to fn, or else the scheduler.
@@ -1348,7 +1352,8 @@ runtime_malg(bool allocatestack, bool signalstack, byte** ret_stack, uintptr* re
 	}
 	newg = allocg();
 	if(allocatestack) {
-		stacksize = StackMin;
+		//stacksize = StackMin;
+		stacksize = get_stack_size();
 		if(signalstack) {
 			stacksize = 32 * 1024; // OS X wants >= 8K, GNU/Linux >= 2K
 #ifdef SIGSTKSZ
@@ -1372,7 +1377,8 @@ runtime_malg(bool allocatestack, bool signalstack, byte** ret_stack, uintptr* re
                 // 32-bit mode, the Go allocation space is all of
                 // memory anyhow.
 		if(sizeof(void*) == 8) {
-			void *p = runtime_SysAlloc(stacksize, &mstats()->other_sys);
+			//void *p = runtime_SysAlloc(stacksize, &mstats()->other_sys);
+			void *p = alloc_stack();
 			if(p == nil)
 				runtime_throw("runtime: cannot allocate memory for goroutine stack");
 			*ret_stack = (byte*)p;
-- 
2.20.1

